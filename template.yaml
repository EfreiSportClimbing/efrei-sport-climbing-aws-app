AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  efrei-sport-climbing-aws-app
  Sample SAM Template for efrei-sport-climbing-aws-app

Globals:
  Function:
    Timeout: 3
    MemorySize: 1024
    Tracing: Active
  Api:
    TracingEnabled: true
Resources:
  DiscordEventHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/discord_event_handler/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Timeout: 15
      Architectures:
        - arm64
      Events:
        Discord:
          Type: Api
          Properties:
            Path: /discord-event-handler
            Method: post
      Environment:
        Variables:
          DISCORD_APP_ID: '1372127887096025181'
          PUBLIC_KEY: '8605d1e852a3a665e53ce2cacced91e87a237a621855adfdbf69aeaba2ac4a65'
          DISCORD_ROLE_ID: '1372130966935572500'
          DISCORD_ROLE_ADMIN_ID: '1372131016591933551'
          GUILD_ID: '1371519432190333059'
          ANTREBLOC_CHANNEL: '1371521997594689547'
          CLIMBUP_CHANNEL: '1371522019254075412'
          CLIMBUP_BORDEAUX_CHANNEL: '1371522048303562872'
          ARKOSE_CHANNEL: '1371522097628844156'
          VERTICAL_ART_CHANNEL: '1371522028951175289'
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:eu-west-3:069545802036:secret:Efrei-Sport-Climbing-App/secrets/discord_bot_token-zxJaiq
        - S3ReadPolicy:
            BucketName: efrei-sport-climbing-app-test-data
      Layers:
        - !Ref LayerCommons
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
          - aws-sdk
  DiscordGarbageCollector:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/discord_garbage_collector/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - arm64
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 * * ? *)
            Name: DiscordGarbageCollectorSchedule
            Description: Schedule removing old session in channel
            Enabled: true
      Environment:
        Variables:
          PUBLIC_KEY: 8605d1e852a3a665e53ce2cacced91e87a237a621855adfdbf69aeaba2ac4a65
          ANTREBLOC_CHANNEL: '1371521997594689547'
          CLIMBUP_CHANNEL: '1371522019254075412'
          CLIMBUP_BORDEAUX_CHANNEL: '1371522048303562872'
          ARKOSE_CHANNEL: '1371522097628844156'
          VERTICAL_ART_CHANNEL: '1371522028951175289'
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:eu-west-3:069545802036:secret:Efrei-Sport-Climbing-App/secrets/discord_bot_token-zxJaiq
      Layers:
        - !Ref LayerCommons
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
          - aws-sdk
  HelloAssoEventHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/helloasso_event_handler/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Timeout: 5
      Architectures:
        - arm64
      Events:
        Discord:
          Type: Api
          Properties:
            Path: /helloasso-event-handler
            Method: post
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:eu-west-3:069545802036:secret:Efrei-Sport-Climbing-App/secrets/discord_bot_token-zxJaiq
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:eu-west-3:069545802036:secret:Efrei-Sport-Climbing-App/secrets/helloasso_client_secret-6EH5xx
        - S3ReadPolicy:
            BucketName: efrei-sport-climbing-app-test-data
      Layers:
        - !Ref LayerCommons
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
          - aws-sdk
  TicketsRegistorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/tickets_registor/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - arm64
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref EfreiSportClimbingBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: tickets/climb-up/
                  - Name: suffix
                    Value: pdf
      Policies:
        - AmazonDynamoDBFullAccess
        - S3ReadPolicy:
            BucketName: efrei-sport-climbing-app-test-data
      Layers:
        - !Ref LayerCommons
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
          - aws-sdk
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Efrei-Sport-Climbing-App.users
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Efrei-Sport-Climbing-App.sessions
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sortId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sortId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  TicketsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Efrei-Sport-Climbing-App.tickets
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: orderId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  IssuesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Efrei-Sport-Climbing-App.issues
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  LayerCommons:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/commons/
      CompatibleRuntimes:
        - nodejs22.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile
  EfreiSportClimbingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: efrei-sport-climbing-app-test-data
  DiscordBotTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: Efrei-Sport-Climbing-App/secrets/discord_bot_token
      Description: Discord Bot Token
  HelloAssoClientSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: Efrei-Sport-Climbing-App/secrets/helloasso_client_secret
      Description: HelloAsso Api Client Id and Secret
  UsersTableBackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: Efrei-Sport-Climbing-App/users
        BackupPlanRule:
          - RuleName: WeeklyBackupRule
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: cron(0 0 ? * 6 *)
            StartWindowMinutes: 60
            CompletionWindowMinutes: 10080
            Lifecycle:
              MoveToColdStorageAfterDays: 30
              DeleteAfterDays: 1095
  BackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: Efrei-Sport-Climbing-App-Backup-Vault
      BackupVaultTags:
        BackupVaultName: Efrei-Sport-Climbing-App-Backup-Vault
  UsersTableBackupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: UsersTableBackupRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - backup.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: UsersTableBackupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:ListBackups
                  - dynamodb:CreateBackup
                  - dynamodb:DeleteBackup
                  - dynamodb:RestoreTableFromBackup
                Resource: '*'
Outputs:
  DiscordEventHandlerApi:
    Description: API Gateway endpoint URL for Prod stage for Discord Event Handler function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/discord-event-handler/
  DiscordEventHandlerFunction:
    Description: Discord Event Handler Lambda Function ARN
    Value: !GetAtt DiscordEventHandlerFunction.Arn
  DiscordEventHandlerFunctionIamRole:
    Description: Implicit IAM Role created for Discord Event Handler function
    Value: !GetAtt DiscordEventHandlerFunctionRole.Arn
  HelloAssoEventHandlerApi:
    Description: API Gateway endpoint URL for Prod stage for Hello Asso Event Handler function
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/helloasso-event-handler/
  HelloAssoEventHandlerFunction:
    Description: Hello Asso Event Handler Lambda Function ARN
    Value: !GetAtt HelloAssoEventHandlerFunction.Arn
  HelloAssoEventHandlerFunctionIamRole:
    Description: Implicit IAM Role created for Hello Asso Event Handler function
    Value: !GetAtt HelloAssoEventHandlerFunctionRole.Arn
  Users:
    Description: Table for users of the association
    Value: !Ref UsersTable
  Sessions:
    Description: Table for sessions of the bot
    Value: !Ref SessionsTable