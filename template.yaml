AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  efrei-sport-climbing-aws-app

  Sample SAM Template for efrei-sport-climbing-aws-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 1024
    Tracing: Active
  Api:
    TracingEnabled: true

Resources:
  DiscordEventHandlerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/discord_event_handler/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
      - arm64
      Events:
        Discord:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /discord-event-handler
            Method: post
      Environment:
        Variables:
          DISCORD_APP_ID: "1071807223044513822"
          PUBLIC_KEY: f89f9764c9ce8ce28b688306bf9c996a686ce1de04e804091d52d602016fc77a
          DISCORD_ROLE_ID: "1082065468682154034"
          GUILD_ID: "934805065745715240"
          ANTREBLOC_CHANNEL: "1081991146697408534"
          CLIMBUP_CHANNEL: "1081991172408487986"
          ARKOSE_CHANNEL: "1081991215467200623"
      Policies: 
        - AmazonDynamoDBFullAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:Efrei-Sport-Climbing-App/secrets/discord_bot_token-1SlCTW"
        - S3ReadPolicy:
            BucketName: efrei-sport-climbing-app-data
      Layers:
        - !Ref LayerCommons
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
  DiscordGarbageCollector:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/discord_garbage_collector/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
      - arm64
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: 'cron(0 0 * * ? *)'
            Name: DiscordGarbageCollectorSchedule
            Description: Schedule removing old session in channel
            Enabled: true
      Environment:
        Variables:
          PUBLIC_KEY: f89f9764c9ce8ce28b688306bf9c996a686ce1de04e804091d52d602016fc77a
          ANTREBLOC_CHANNEL: "1081991146697408534"
          CLIMBUP_CHANNEL: "1081991172408487986"
          ARKOSE_CHANNEL: "1081991215467200623"
      Policies: 
        - AmazonDynamoDBFullAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:Efrei-Sport-Climbing-App/secrets/discord_bot_token-1SlCTW"
      Layers:
        - !Ref LayerCommons
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
  HelloAssoEventHandlerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/helloasso_event_handler/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
      - arm64
      Events:
        Discord:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /helloasso-event-handler
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  CalendarGeneratorFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/calendar_generator/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
      - arm64
      Events:
         Schedule:
          Type: Schedule
          Properties:
            Schedule: 'cron(0 0 * * ? *)'
            Name: CalendarGeneratorSchedule
            Description: Schedule updating calendar in S3
            Enabled: false
      Policies: 
        - AmazonDynamoDBFullAccess
        - S3ReadPolicy:
            BucketName: efrei-sport-climbing-app-data
      Layers:
        - !Ref LayerCommons
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
  TicketsRegistorFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/tickets_registor/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
      - arm64
      Events:
         S3Event:
          Type: S3
          Properties:
            Bucket:
              Ref: EfreiSportClimbingBucket     # This must be the name of an S3 bucket declared in the same template file
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: prefix      # or "suffix"
                  Value: tickets/climb-up/
                - Name: suffix
                  Value: pdf
      Policies: 
        - AmazonDynamoDBFullAccess
        - S3ReadPolicy:
            BucketName: efrei-sport-climbing-app-data
      Layers:
        - !Ref LayerCommons
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Efrei-Sport-Climbing-App.users
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Efrei-Sport-Climbing-App.sessions
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sortId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sortId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  TicketsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Efrei-Sport-Climbing-App.tickets
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: date
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: date
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  LayerCommons:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/commons/
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile
  EfreiSportClimbingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: efrei-sport-climbing-app-data
      

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  DiscordEventHandlerApi:
    Description: API Gateway endpoint URL for Prod stage for Discord Event Handler function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/discord-event-handler/"
  DiscordEventHandlerFunction:
    Description: Discord Event Handler Lambda Function ARN
    Value: !GetAtt DiscordEventHandlerFunction.Arn
  DiscordEventHandlerFunctionIamRole:
    Description: Implicit IAM Role created for Discord Event Handler function
    Value: !GetAtt DiscordEventHandlerFunctionRole.Arn
  HelloAssoEventHandlerApi:
    Description: API Gateway endpoint URL for Prod stage for Hello Asso Event Handler function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/helloasso-event-handler/"
  HelloAssoEventHandlerFunction:
    Description: Hello Asso Event Handler Lambda Function ARN
    Value: !GetAtt HelloAssoEventHandlerFunction.Arn
  HelloAssoEventHandlerFunctionIamRole:
    Description: Implicit IAM Role created for Hello Asso Event Handler function
    Value: !GetAtt HelloAssoEventHandlerFunctionRole.Arn
  Users:
    Description: Table for users of the association
    Value: !Ref UsersTable
  Sessions:
    Description: Table for sessions of the bot
    Value: !Ref SessionsTable
